syntax = "proto3";

package game;

service GameStateService {
  // client sends streams of PlayerState request messages
  // server sends streams of GameState response messages
  rpc StreamGameState(stream PlayerState) returns (stream GameState) {}
}

message PlayerMetadata {
  int32 user_id = 1; // the unique user ID in the system that represents this player. used to retrieve icon / character / portrait / history / etc
  int32 number = 2; // the number of the player they are in the game currently. used to efficiently reference people by ints rather than strings
  string name = 3; // the string name of the player. used for things like the scoreboard
}

message PlayerState {
  int32 number = 1;
  bool connected = 2;
  PlayerAction playerAction = 3;
  Coordinates coordinates = 4;
}

enum PlayerAction {
  Still = 0;
  Jump = 1;
  LookLeft = 2;
  LookRight = 3;
  LookUp = 4;
  LookDown = 5;
}

// With 3 floats for X,Y,Z, floats are 4 bits every time so 12 byte updates + overhead = 18 bytes
// With 3 doubles for X,Y,Z, doubles are 8 bits every time so 24 byte updates + overhead = 30 bytes
// With 3 int32s for X,Y,Z, int32s are variable length but for 0-1000 it would be approximately 2 bytes + overhead of 1 byte = 3 bytes * 3 = 9 bytes
// 3x integers = 2x efficient as 2x floats and 3x efficient as doubles
message Coordinates {
  int32 x = 4; // where in the X plane
  int32 y = 5;
  int32 z = 6;
}

// Define game state update fields with optional tags (in case certain players haven't moved / updated)
message GameState {
  optional PlayerState player1 = 1;
  optional PlayerState player2 = 2;
  optional PlayerState player3 = 3;
  optional PlayerState player4 = 4;
  optional PlayerState player5 = 5;
  optional PlayerState player6 = 6;
  optional PlayerState player7 = 7;
  optional PlayerState player8 = 8;
  optional PlayerState player9 = 9;
  optional PlayerState player10 = 10;
}
